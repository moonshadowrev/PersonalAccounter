{
    # Global options
    email {$ADMIN_EMAIL:admin@localhost}
    admin off
    
    # Logging
    log {
        level INFO
        format json
    }
    
    # ACME settings for automatic HTTPS
    acme_ca https://acme-v02.api.letsencrypt.org/directory
    acme_ca_root /etc/ssl/certs/ca-certificates.crt
}

# Main application
{$DOMAIN:localhost} {
    # Set document root
    root * /var/www/html/public
    
    # Enable file serving
    file_server
    
    # Security headers
    header {
        # Security headers
        X-Content-Type-Options nosniff
        X-Frame-Options DENY
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        Permissions-Policy "geolocation=(), microphone=(), camera=()"
        
        # Remove server identification
        -Server
        
        # Content Security Policy
        Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self';"
        
        # HSTS (only if using HTTPS) - will be automatically enabled by Caddy for HTTPS
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    }
    
    # PHP-FPM configuration
    php_fastcgi app:9000 {
        # Set proper index files
        index index.php
        
        # Handle PHP files
        try_files {path} {path}/index.php =404
        
        # Read timeout
        read_timeout 300s
        write_timeout 300s
        
        # Environment variables for PHP
        env APP_ENV {$APP_ENV}
        env APP_DEBUG {$APP_DEBUG}
        env APP_URL {$APP_URL}
        env APP_DOMAIN {$DOMAIN}
    }
    
    # Handle static assets with caching
    @static {
        file
        path *.css *.js *.png *.jpg *.jpeg *.gif *.ico *.svg *.woff *.woff2 *.ttf *.eot
    }
    handle @static {
        header Cache-Control "public, max-age=31536000, immutable"
        file_server
    }
    
    # Handle uploads directory
    @uploads {
        path /uploads/*
    }
    handle @uploads {
        header Cache-Control "public, max-age=86400"
        file_server
    }
    
    # Health check endpoint
    handle /health {
        respond "OK" 200
        header Content-Type "text/plain"
    }
    
    # API endpoint handling
    @api {
        path /api/*
    }
    handle @api {
        header Cache-Control "no-cache, no-store, must-revalidate"
        header Pragma "no-cache"
        header Expires "0"
        php_fastcgi app:9000
    }
    
    # Deny access to sensitive files
    @forbidden {
        path /.env*
        path /.git*
        path /composer.*
        path /control*
        path /docker*
        path /config*
        path /logs*
        path /sessions*
        path /vendor*
        path /database*
        path /bootstrap*
        path /app*
        path *.md
        path *.txt
        path *.log
        path *.yml
        path *.yaml
        path *.json
        path *.lock
        path *.xml
        path *.ini
        path *.conf
        path *.sh
    }
    respond @forbidden "Access denied" 403
    
    # Handle directory traversal attempts
    @dotfiles {
        path */.*
    }
    respond @dotfiles "Access denied" 403
    
    # Block common attack patterns
    @attacks {
        path *wp-admin*
        path *wp-content*
        path *wp-includes*
        path *phpMyAdmin*
        path *phpmyadmin*
        path *.php~
        path *.php.bak
        path *.sql
        path *.sql.gz
        path *.sql.bz2
        path *.backup
        path *.bak
        path *.old
        path *.tmp
    }
    respond @attacks "Not Found" 404
    
    # Rate limiting for login attempts
    @login {
        path /login
        method POST
    }
    handle @login {
        rate_limit {
            zone login_attempts
            key {remote_host}
            events 5
            window 5m
        }
        php_fastcgi app:9000
    }
    
    # Error handling
    handle_errors {
        @4xx expression {http.error.status_code} >= 400 && {http.error.status_code} < 500
        @5xx expression {http.error.status_code} >= 500
        
        handle @4xx {
            root * /var/www/html/public
            rewrite * /index.php?error={http.error.status_code}
        }
        
        handle @5xx {
            respond "Internal Server Error" 500
        }
    }
    
    # Logging
    log {
        output file /var/log/caddy/access.log {
            roll_size 100MB
            roll_keep 5
            roll_keep_for 720h
        }
        format json
        level INFO
    }
    
    # Enable compression
    encode zstd gzip
    
    # Request limits
    request_body {
        max_size 64MB
    }
    
    # Redirect trailing slashes
    @trailingSlash {
        path_regexp ^/(.+)/$
    }
    redir @trailingSlash /{re.1} 301
} 