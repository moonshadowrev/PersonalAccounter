services:
  # MariaDB Database
  database:
    image: mariadb:10.11
    container_name: accounting_panel_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_general_ci
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mariadb/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
      - ./logs:/var/log/mysql
    networks:
      - accounting_network
    ports:
      - "${DB_PORT_EXPOSE:-3306}:3306"
    healthcheck:
      # Simple but reliable check: wait for MariaDB to accept connections
      # Database and user creation happens automatically during container initialization
      test: ["CMD-SHELL", "mariadb -u root -p$$MYSQL_ROOT_PASSWORD --skip-ssl -e 'SELECT 1;' >/dev/null 2>&1"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 10
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --bind-address=0.0.0.0

  # PHP-FPM Application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: accounting_panel_app
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_URL=${APP_URL}
      - APP_DOMAIN=${APP_DOMAIN}
      - APP_TIMEZONE=${APP_TIMEZONE:-UTC}
      - DB_HOST=database
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=3306
      - SESSION_LIFETIME=${SESSION_LIFETIME:-0}
      - SESSION_SECURE=${SESSION_SECURE:-false}
      - SESSION_SAMESITE=${SESSION_SAMESITE:-Lax}
      - SESSION_KEY=${SESSION_KEY}
      - LOGIN_ATTEMPTS_LIMIT=${LOGIN_ATTEMPTS_LIMIT:-5}
      - LOGIN_ATTEMPTS_TIMEOUT=${LOGIN_ATTEMPTS_TIMEOUT:-300}
      - API_MAX_FAILED_ATTEMPTS=${API_MAX_FAILED_ATTEMPTS:-5}
      - API_BLOCK_DURATION=${API_BLOCK_DURATION:-300}
      - API_DEFAULT_RATE_LIMIT=${API_DEFAULT_RATE_LIMIT:-60}
      - API_MAX_RATE_LIMIT=${API_MAX_RATE_LIMIT:-1000}
      - LOG_CHANNEL=${LOG_CHANNEL:-file}
      - LOG_LEVEL=${LOG_LEVEL:-warning}
      - LOG_MAX_FILES=${LOG_MAX_FILES:-5}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - ./app:/var/www/html/app:cached
      - ./bootstrap:/var/www/html/bootstrap:cached
      - ./config:/var/www/html/config:cached
      - ./database:/var/www/html/database:cached
      - ./public:/var/www/html/public:cached
      - ./vendor:/var/www/html/vendor:cached
      - ./control:/var/www/html/control:cached
      - ./.env:/var/www/html/.env:ro
      - app_logs:/var/www/html/logs
      - app_sessions:/var/www/html/sessions
      - app_uploads:/var/www/html/public/uploads
    networks:
      - accounting_network
    healthcheck:
      # Verify both PHP-FPM and database connectivity with application user
      test: ["CMD-SHELL", "pidof php-fpm > /dev/null && mariadb -h$$DB_HOST -u$$DB_USER -p$$DB_PASS $$DB_NAME --skip-ssl -e 'SELECT 1;' >/dev/null 2>&1"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s

  # Caddy Web Server
  caddy:
    image: caddy:2.7-alpine
    container_name: accounting_panel_caddy
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "${HTTP_PORT:-80}:80"
    env_file:
      - .env
    volumes:
      - ./docker/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ./public:/var/www/html/public:ro
      - caddy_data:/data
      - caddy_config:/config
      - caddy_logs:/var/log/caddy
    networks:
      - accounting_network
    environment:
      - DOMAIN=${APP_DOMAIN}
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_URL=${APP_URL}
      - APP_DOMAIN=${APP_DOMAIN}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Adminer (Database Management - lightweight alternative to phpMyAdmin)
  adminer:
    image: adminer:4.8.1-standalone
    container_name: accounting_panel_adminer
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DESIGN: pepa-linha
      ADMINER_PLUGINS: tables-filter tinymce
    ports:
      - "${PHPMYADMIN_PORT:-8080}:8080"
    networks:
      - accounting_network
    profiles:
      - development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cron Service
  cron:
    build:
      context: .
      dockerfile: docker/cron/Dockerfile
    container_name: accounting_panel_cron
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
      app:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./.env:/var/www/html/.env:ro
      - ./:/var/www/html:ro
      - app_logs:/var/www/html/logs
    networks:
      - accounting_network
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f start-cron.sh > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # CLI Service for running php control commands
  cli:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: accounting_panel_cli
    depends_on:
      database:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./.env:/var/www/html/.env:ro
      - ./:/var/www/html
      - app_logs:/var/www/html/logs
      - app_sessions:/var/www/html/sessions
      - app_uploads:/var/www/html/public/uploads
    networks:
      - accounting_network
    working_dir: /var/www/html
    profiles:
      - cli
    entrypoint: ["tail", "-f", "/dev/null"]  # Keep container running for interactive use

networks:
  # Auto-managed bridge network for maximum compatibility
  # Docker automatically handles service discovery, subnet assignment, and conflict avoidance
  # Containers can communicate using service names (database, app, caddy, etc.)
  accounting_network:
    driver: bridge
    # No custom name or subnet - lets Docker handle everything automatically

volumes:
  db_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local
  caddy_logs:
    driver: local
  app_logs:
    driver: local
  app_sessions:
    driver: local
  app_uploads:
    driver: local 